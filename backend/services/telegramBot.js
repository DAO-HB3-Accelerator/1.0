const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
let bot = null;

// –î–æ–±–∞–≤–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const verificationCodes = new Map(); // –§–æ—Ä–º–∞—Ç: { telegramId: { code: '123456', token: 'auth_token', expires: timestamp } }

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
 * @returns {Object|null} - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ null, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
 */
function initTelegramBot() {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN not set, Telegram integration disabled');
    return null;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ü–∏–µ–π polling
    bot = new TelegramBot(token, { polling: true });
    console.log('Telegram bot initialized');

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    registerHandlers();

    return {
      bot,
      sendMessage: (chatId, text) => bot.sendMessage(chatId, text)
    };
  } catch (error) {
    console.error('Error initializing Telegram bot:', error);
    return null;
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ—Ç–∞
 */
function registerHandlers() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
  bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const param = match[1] ? match[1].trim() : '';
    
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: "${param}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    
    if (param.startsWith('auth_')) {
      // –≠—Ç–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ deep link
      const authToken = param.replace('auth_', '');
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authToken}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω
        const { pool } = require('../db');
        const tokenResult = await pool.query(
          'SELECT user_id, expires_at FROM telegram_auth_tokens WHERE token = $1',
          [authToken]
        );
        
        if (tokenResult.rows.length === 0 || new Date(tokenResult.rows[0].expires_at) < new Date()) {
          bot.sendMessage(chatId, '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
          return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString(); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        verificationCodes.set(chatId.toString(), {
          code: verificationCode,
          token: authToken,
          expires: Date.now() + 5 * 60 * 1000 // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 5 –º–∏–Ω—É—Ç
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.sendMessage(chatId, 
          'üîê –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:\n\n' +
          `<code>${verificationCode}</code>\n\n` +
          '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.',
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('Error processing auth token:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
      }
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
      const { pool } = require('../db');
      try {
        const lastTokenResult = await pool.query(`
          SELECT token FROM telegram_auth_tokens 
          WHERE expires_at > NOW() AND used = FALSE 
          ORDER BY created_at DESC LIMIT 1
        `);
        
        if (lastTokenResult.rows.length > 0) {
          const authToken = lastTokenResult.rows[0].token;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          const verificationCode = Math.floor(100000 + Math.random() * 900000).toString(); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          verificationCodes.set(chatId.toString(), {
            code: verificationCode,
            token: authToken,
            expires: Date.now() + 5 * 60 * 1000 // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 5 –º–∏–Ω—É—Ç
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          bot.sendMessage(chatId, 
            'üîê –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:\n\n' +
            `<code>${verificationCode}</code>\n\n` +
            '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.',
            { parse_mode: 'HTML' }
          );
          return;
        }
      } catch (error) {
        console.error('Error checking last token:', error);
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, 
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ DApp for Business.\n\n' +
        '–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ.'
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && text.startsWith('/')) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const verificationData = verificationCodes.get(chatId.toString());
    
    if (verificationData && text === verificationData.code) {
      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (Date.now() > verificationData.expires) {
        bot.sendMessage(chatId, '‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.');
        verificationCodes.delete(chatId.toString());
        return;
      }
      
      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      try {
        const result = await linkTelegramAccount(chatId.toString(), verificationData.token);
        
        if (result.success) {
          bot.sendMessage(chatId, 
            '‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n' +
            '–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å DApp for Business.\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π.'
          );
        } else {
          bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + (result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
          );
        }
        
        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verificationCodes.delete(chatId.toString());
      } catch (error) {
        console.error('Error completing authentication:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
      }
    } else if (verificationData) {
      // –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –Ω–æ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } else {
      // –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      bot.sendMessage(chatId, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.');
    }
  });

  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  bot.onText(/\/auth (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const authToken = match[1].trim();
    
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º: ${authToken}`);
    
    try {
      // –°–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ —Ç–æ–∫–µ–Ω—É
      const result = await linkTelegramAccount(chatId.toString(), authToken);
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: ${JSON.stringify(result)}`);
      
      if (result.success) {
        bot.sendMessage(chatId, 
          '‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n' +
          '–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å DApp for Business.\n' +
          '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π.'
        );
      } else {
        bot.sendMessage(chatId, 
          '‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + (result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        );
      }
    } catch (error) {
      console.error('Error linking telegram account:', error);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.on('polling_error', (error) => {
    logger.error(`[polling_error] ${JSON.stringify(error)}`);
  });

  console.log('Telegram bot handlers registered');
}

/**
 * –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Telegram ID —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function linkTelegramAccount(telegramId, authToken) {
  try {
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–≤—è–∑–∞—Ç—å Telegram ID ${telegramId} —Å —Ç–æ–∫–µ–Ω–æ–º ${authToken}`);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î
    const { pool } = require('../db');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const tokenResult = await pool.query(
      'SELECT user_id, expires_at FROM telegram_auth_tokens WHERE token = $1',
      [authToken]
    );
    
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞: ${JSON.stringify(tokenResult.rows)}`);
    
    if (tokenResult.rows.length === 0 || new Date(tokenResult.rows[0].expires_at) < new Date()) {
      console.log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
      return { success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' };
    }
    
    const userId = tokenResult.rows[0].user_id;
    console.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(
      'INSERT INTO user_identities (user_id, identity_type, identity_value, verified, created_at) ' +
      'VALUES ($1, $2, $3, true, NOW()) ' +
      'ON CONFLICT (identity_type, identity_value) ' +
      'DO UPDATE SET user_id = $1, verified = true',
      [userId, 'telegram', telegramId]
    );
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await pool.query(
      'UPDATE telegram_auth_tokens SET used = true WHERE token = $1',
      [authToken]
    );
    
    return { success: true };
  } catch (error) {
    console.error('Error in linkTelegramAccount:', error);
    return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
  }
}

module.exports = {
  initTelegramBot
}; 