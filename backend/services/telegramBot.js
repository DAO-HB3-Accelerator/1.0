const TelegramBot = require('node-telegram-bot-api');
const { ChatOllama } = require('@langchain/ollama');
const axios = require('axios');
const dns = require('dns').promises;
require('dotenv').config();
const { sleep } = require('../utils/helpers');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const { linkIdentity, getUserIdByIdentity } = require('../utils/identity-linker');

class TelegramBotService {
  constructor() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error('Token is required');
    }

    this.isRunning = false;
    this.maxRetries = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ polling
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
      polling: false,
      request: {
        proxy: null,
        agentOptions: {
          rejectUnauthorized: true,
          minVersion: 'TLSv1.2'
        },
        timeout: 30000
      }
    });
    
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    this.chat = new ChatOllama({
      model: 'mistral',
      baseUrl: 'http://localhost:11434'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è axios
    this.axiosConfig = {
      timeout: 5000,
      proxy: false,
      httpsAgent: new (require('https').Agent)({
        rejectUnauthorized: true,
        minVersion: 'TLSv1.2'
      })
    };

    this.initialize();
  }

  setupHandlers() {
    this.bot.onText(/.*/, async (msg) => {
      try {
        const chatId = msg.chat.id;
        const userQuestion = msg.text;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (userQuestion.startsWith('/')) {
          return;
        }
        
        console.log('–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å:', userQuestion);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        const result = await this.chat.invoke(userQuestion);
        const assistantResponse = result.content;
        
        await this.bot.sendMessage(chatId, assistantResponse);
      } catch (error) {
        console.error('Telegram bot error:', error);
        await this.bot.sendMessage(msg.chat.id, 
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. ' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
      }
    });

    this.bot.onText(/\/link (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const ethAddress = match[1];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Ethereum-–∞–¥—Ä–µ—Å–∞
      if (!/^0x[a-fA-F0-9]{40}$/.test(ethAddress)) {
        this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum-–∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 0x...');
        return;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Ethereum-–∞–¥—Ä–µ—Å—É
        const userId = await getUserIdByIdentity('ethereum', ethAddress);
        
        if (!userId) {
          this.bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Ethereum-–∞–¥—Ä–µ—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.');
          return;
        }
        
        // –°–≤—è–∑—ã–≤–∞–µ–º Telegram-–∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const success = await linkIdentity(userId, 'telegram', chatId.toString());
        
        if (success) {
          this.bot.sendMessage(chatId, `–í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Ethereum-–∞–¥—Ä–µ—Å–æ–º ${ethAddress}`);
        } else {
          this.bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
        this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  setupCommands() {
    this.bot.onText(/\/start/, async (msg) => {
      const welcomeMessage = `
        üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DApp for Business.
        
        –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
        ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–µ dApps
        ‚Ä¢ –ë–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
        ‚Ä¢ Web3 –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
        
        –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - 
        –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
      `;
      await this.bot.sendMessage(msg.chat.id, welcomeMessage);
    });

    this.bot.onText(/\/help/, async (msg) => {
      const helpMessage = `
        ü§ñ –Ø - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DApp for Business
        
         –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
         ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
         ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –±–∏–∑–Ω–µ—Å
         ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ Web3 –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
         
         –ö–æ–º–∞–Ω–¥—ã:
         /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
         /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
         /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
         
         –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!
       `;
      await this.bot.sendMessage(msg.chat.id, helpMessage);
    });

    this.bot.onText(/\/status/, async (msg) => {
      try {
        const status = {
          isRunning: this.isRunning,
          uptime: process.uptime(),
          memoryUsage: process.memoryUsage(),
          connections: {
            telegram: Boolean(this.bot),
            ollama: Boolean(this.chat)
          }
        };

        const statusMessage = `
          üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:
          
          üü¢ –°—Ç–∞—Ç—É—Å: ${status.isRunning ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
          ‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(status.uptime / 60)} –º–∏–Ω
          
          üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
          ‚Ä¢ Telegram API: ${status.connections.telegram ? '‚úÖ' : '‚ùå'}
          ‚Ä¢ Ollama: ${status.connections.ollama ? '‚úÖ' : '‚ùå'}
          
          üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:
          ‚Ä¢ Heap: ${Math.round(status.memoryUsage.heapUsed / 1024 / 1024)}MB
          ‚Ä¢ RSS: ${Math.round(status.memoryUsage.rss / 1024 / 1024)}MB
        `;

        await this.bot.sendMessage(msg.chat.id, statusMessage);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        await this.bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
      }
    });
  }

  async initialize() {
    let retries = 0;
    
    while (retries < this.maxRetries) {
      try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ (${retries + 1}/${this.maxRetries})...`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º DNS –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        try {
          console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è api.telegram.org...');
          const addresses = await dns.resolve4('api.telegram.org');
          console.log('IP –∞–¥—Ä–µ—Å–∞ api.telegram.org:', addresses);
          
          // –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
          try {
            const { stdout } = await exec('ping -c 1 api.telegram.org');
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç ping:', stdout);
          } catch (pingError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping:', pingError);
            throw new Error('–°–µ—Ä–≤–µ—Ä Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
          throw error;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º API
        try {
          const response = await axios.get(
            `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`,
            this.axiosConfig
          );
          
          if (response.status !== 200) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram:', {
            botInfo: response.data.result
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API Telegram:', {
            message: error.message,
            code: error.code,
            response: error.response?.data,
            config: {
              url: error.config?.url,
              method: error.config?.method,
              timeout: error.config?.timeout
            }
          });
          throw error;
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await this.initBot();
        console.log('Telegram bot service initialized');
        return;
        
      } catch (error) {
        retries++;
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', {
          name: error.name,
          message: error.message,
          code: error.code,
          response: error.response?.data,
          stack: error.stack
        });
        
        if (retries < this.maxRetries) {
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${this.retryDelay/1000} —Å–µ–∫—É–Ω–¥...`);
          await sleep(this.retryDelay);
        } else {
          console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram');
          throw error;
        }
      }
    }
  }

  async initBot() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
      const webhookInfo = await this.bot.getWebHookInfo();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å webhook –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π polling, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
      if (webhookInfo.url || webhookInfo.has_custom_certificate) {
        console.log('–£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook...');
        await this.bot.deleteWebHook();
        await new Promise(resolve => setTimeout(resolve, 2000));
      }

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      try {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...');
        const updates = await this.bot.getUpdates({
          offset: -1,
          limit: 1,
          timeout: 0
        });
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', updates);
      } catch (error) {
        if (error.code === 409) {
          console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
          await this.stop();
          await new Promise(resolve => setTimeout(resolve, 5000));
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          await this.bot.getUpdates({ offset: -1, limit: 1, timeout: 0 });
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ó–∞–ø—É—Å–∫–∞–µ–º polling
      console.log('–ó–∞–ø—É—Å–∫–∞–µ–º polling...');
      await this.bot.startPolling({
        interval: 2000,
        params: {
          timeout: 10
        }
      });

      this.isRunning = true;
      this.setupHandlers();
      this.setupErrorHandlers();
      this.setupCommands();
    } catch (error) {
      if (error.code === 409) {
        console.log('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
        this.isRunning = false;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
        throw error;
      }
    }
  }

  setupErrorHandlers() {
    this.bot.on('polling_error', (error) => {
      console.error('Telegram polling error:', {
        code: error.code,
        message: error.message,
        stack: error.stack
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (this.isRunning && (error.code === 'EFATAL' || error.code === 'ETELEGRAM')) {
        console.log('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        setTimeout(async () => {
          try {
            await this.stop();
            await this.initBot();
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
          }
        }, 5000);
      } else if (error.code === 'ECONNRESET' || error.code === 'ECONNREFUSED') {
        // –î–ª—è –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.bot.startPolling();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('Telegram bot error:', error);
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
      setTimeout(() => this.bot.startPolling(), 5000);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—à–∏–±–æ–∫
    this.bot.on('webhook_error', (error) => {
      console.error('Telegram webhook error:', error);
    });
  }

  async stop() {
    if (this.isRunning) {
      console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...');
      try {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.bot.removeAllListeners();

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await this.bot.stopPolling();

        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await this.bot.getUpdates({
          offset: -1,
          limit: 1,
          timeout: 1
        });

        this.isRunning = false;
        console.log('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
        this.isRunning = false;
      }
    }
  }

  async checkTelegramAvailability() {
    const { stdout } = await exec('ping -c 1 api.telegram.org');
    const match = stdout.match(/time=(\d+(\.\d+)?)/);
    if (match) {
      const pingTime = parseFloat(match[1]);
      console.log(`–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ Telegram API: ${pingTime}ms`);
      if (pingTime > 1000) { // –ï—Å–ª–∏ –ø–∏–Ω–≥ –±–æ–ª—å—à–µ —Å–µ–∫—É–Ω–¥—ã
        console.warn('–í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API');
      }
    }
    return stdout;
  }
}

module.exports = TelegramBotService; 