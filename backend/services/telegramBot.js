const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');
const { pool } = require('../db');
const crypto = require('crypto');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
let bot = null;

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
async function sendVerificationCode(chatId) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ —Ç–æ–∫–µ–Ω
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const authToken = crypto.randomBytes(32).toString('hex');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await pool.query(
      `WITH new_user AS (
         INSERT INTO users (created_at)
         VALUES (NOW())
         RETURNING id
       )
       INSERT INTO telegram_auth_tokens 
       (user_id, token, verification_code, telegram_id, expires_at) 
       VALUES (
         (SELECT id FROM new_user),
         $1, $2, $3,
         NOW() + INTERVAL '5 minutes'
       )
       RETURNING user_id`,
      [authToken, code, chatId.toString()]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    const sentMessage = await bot.sendMessage(chatId,
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ DApp for Business.\n\n' +
      'üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n' +
      `<code>${code}</code>\n\n` +
      '–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n' +
      '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥', callback_data: 'new_code' }]
          ]
        }
      }
    );

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, sentMessage.message_id);
        await bot.sendMessage(chatId,
          '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥',
          {
            reply_markup: {
              keyboard: [
                [{ text: '/start' }]
              ],
              resize_keyboard: true,
              persistent: true
            }
          }
        );
      } catch (error) {
        console.error('Error deleting message:', error);
      }
    }, 30000);

    return { code, token: authToken, userId: result.rows[0].user_id };
  } catch (error) {
    console.error('Error sending verification code:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
 */
async function verifyCode(code) {
  try {
    const result = await pool.query(
      `SELECT token, telegram_id, user_id 
       FROM telegram_auth_tokens 
       WHERE verification_code = $1 
       AND expires_at > NOW() 
       AND NOT used`,
      [code]
    );

    if (result.rows.length === 0) {
      return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥' };
    }

    const { token, telegram_id, user_id } = result.rows[0];

    // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await pool.query(
      'UPDATE telegram_auth_tokens SET used = true WHERE token = $1',
      [token]
    );

    // –î–æ–±–∞–≤–ª—è–µ–º Telegram ID –≤ —Ç–∞–±–ª–∏—Ü—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    await pool.query(
      `INSERT INTO user_identities 
       (user_id, identity_type, identity_value, verified, created_at)
       VALUES ($1, 'telegram', $2, true, NOW())
       ON CONFLICT (identity_type, identity_value) 
       DO UPDATE SET verified = true`,
      [user_id, telegram_id]
    );

    return {
      success: true,
      telegramId: telegram_id,
      userId: user_id
    };
  } catch (error) {
    console.error('Error verifying code:', error);
    throw error;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
 */
function initTelegramBot() {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN not set');
    return null;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    bot = new TelegramBot(token, { 
      polling: {
        autoStart: true,
        params: {
          timeout: 10
        }
      },
      request: {
        timeout: 30000, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        proxy: process.env.HTTPS_PROXY // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      }
    });

    console.log('Telegram bot initialized');

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.removeAllListeners();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    bot.setMyCommands([
      { command: '/start', description: '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' },
      { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' }
    ]).catch(error => {
      console.warn('Error setting bot commands:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      try {
        await sendVerificationCode(chatId);
      } catch (error) {
        console.error('Error handling /start:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
          .catch(err => console.error('Error sending error message:', err));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
    bot.on('polling_error', (error) => {
      console.error('Telegram bot polling error:', error);
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => {
        try {
          bot.startPolling();
        } catch (e) {
          console.error('Error restarting polling:', e);
        }
      }, 10000); // –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
    bot.on('stop', () => {
      console.log('Bot polling stopped');
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
      setTimeout(() => {
        try {
          bot.startPolling();
        } catch (e) {
          console.error('Error restarting polling after stop:', e);
        }
      }, 5000);
    });

    return bot;

  } catch (error) {
    console.error('Error initializing Telegram bot:', error);
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  initTelegramBot,
  verifyCode,
  sendVerificationCode
}; 